import {pick} from 'lodash';
import {
  DeserializeOptions,
  SArray,
  SObject,
  SStringNT,
  SUInt16BE,
  SUInt8,
  SerializeOptions,
  field,
} from 'serio';

/** Maximum number of categories.
 *
 * References:
 *   - https://github.com/jichu4n/palm-os-sdk/blob/master/sdk-3.1/include/Core/System/DataMgr.h#L34
 */
export const NUM_CATEGORIES = 16;
/** Maximum length of category labels - 15 chars + 1 NUL byte.
 *
 * References:
 *   - https://github.com/jichu4n/palm-os-sdk/blob/master/sdk-3.1/include/Core/System/DataMgr.h#L35
 */
export const CATEGORY_LABEL_LENGTH = 16;

/** Information about a category. */
export interface Category {
  /** Name of the category.
   *
   * Max length is CATEGORY_LABEL_LENGTH - 1.
   */
  label: string;
  /** ID of the category.
   *
   * Unique IDs generated by the device are between 0 and 127. Unique IDs
   * generated by the desktop computer are between 128 and 255.
   */
  uniqId: number;
  /** Dirty bit indicating whether this category has been renamed. */
  isRenamed: boolean;
}

/** AppInfo block for standard category data.
 *
 * References:
 *   - https://jichu4n.github.io/palm-pdb/assets/Palm%20File%20Format%20Specification.pdf
 *   - https://github.com/jichu4n/palm-os-sdk/blob/master/sdk-5r3/include/Core/UI/Category.h
 */
export class AppInfoType extends SObject {
  /** Array of category information (dmRecNumCategories = 16 elements). */
  categories: Array<Category> = [];
  @field(SUInt16BE)
  private renamedCategories = 0;
  @field(
    SArray.of(SStringNT.ofLength(CATEGORY_LABEL_LENGTH)).ofLength(
      NUM_CATEGORIES
    )
  )
  private categoryLabels: Array<string> = [];
  @field(SArray.of(SUInt8).ofLength(NUM_CATEGORIES))
  private categoryUniqIds: Array<number> = [];

  /** The last unique category ID assigned. */
  @field(SUInt8)
  lastUniqId = 0;

  @field(SUInt8)
  private readonly padding1 = 0;

  /** Finds the category with the given unique ID. */
  getCategoryByUniqId(uniqId: number): Category | null {
    // return _.find(this.categories, ['categoryUniqId', uniqId]) ?? null;
    return (
      this.categories.find((category) => category.uniqId === uniqId) ?? null
    );
  }

  /** Finds the category with the given label. */
  getCategoryByLabel(label: string): Category | null {
    return this.categories.find((category) => category.label === label) ?? null;
  }

  deserialize(buffer: Buffer, opts?: DeserializeOptions) {
    const offset = super.deserialize(buffer, opts);
    this.categories = [];
    for (let i = 0; i < NUM_CATEGORIES; ++i) {
      if (!this.categoryLabels[i]) {
        break;
      }
      this.categories.push({
        label: this.categoryLabels[i],
        uniqId: this.categoryUniqIds[i],
        isRenamed: !!(this.renamedCategories & (1 << i)),
      });
    }
    return offset;
  }

  serialize(opts?: SerializeOptions): Buffer {
    this.categoryLabels = [];
    this.categoryUniqIds = [];
    this.renamedCategories = 0;
    for (let i = 0; i < this.categories.length; ++i) {
      const {label, uniqId, isRenamed} = this.categories[i];
      this.categoryLabels.push(label);
      this.categoryUniqIds.push(uniqId);
      if (isRenamed) {
        this.renamedCategories |= 1 << i;
      }
    }
    return super.serialize(opts);
  }

  toJSON() {
    return pick(this, ['categories', 'lastUniqId']);
  }
}
